// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id          String     @id @default(cuid())
  name        String
  description String
  options     Option[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  responses   Response[]
}

model Option {
  id         String           @id @default(cuid())
  eventId    String
  event      Event            @relation(fields: [eventId], references: [id])
  date       String
  selections ResponseOption[]
}

model Response {
  id              String           @id @default(cuid())
  eventId         String
  event           Event            @relation(fields: [eventId], references: [id])
  respondentId    String
  respondent      Respondent       @relation(fields: [respondentId], references: [id])
  selectedOptions ResponseOption[]
}

model ResponseOption {
  id         String   @id @default(cuid())
  responseId String
  response   Response @relation(fields: [responseId], references: [id])
  optionId   String
  option     Option   @relation(fields: [optionId], references: [id])

  preference Int // -1 means impossible, highest value is most preferred
  uncertain  Boolean // true means the user is not sure if they can make it
}

model Respondent {
  id       String     @id @default(cuid())
  userId   String?    @unique
  user     User?      @relation(fields: [userId], references: [id])
  name     String
  Response Response[]
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Respondent    Respondent[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
